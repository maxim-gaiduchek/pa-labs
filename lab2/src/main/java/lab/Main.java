package lab;

import lab.algorithms.AStarAlgorithm;
import lab.algorithms.BfsAlgorithm;
import lab.entities.Cell;
import lab.entities.Maze;
import lab.entities.Result;
import lab.factories.MazeFactory;
import lab.utils.Timer;

import java.util.Random;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        /*Pair params = generateHeightAndWidth();
        Maze maze = new MazeFactory().generate(params.num1, params.num2);
        Cell start = getRandomCell(maze), end = getRandomCell(maze);*/

        String mazeStr = """
                00███████████████████████████████████████████████████████████████████████████████████████████████████
                █0█0█0█000█0█00000█00000█0█000█0000000█0█000█00000█0█0000000█00000█0█000000000000000█000000000█00000█
                █0█0█0███0█0███0███0█0███0█0█0█0█0███0█0█0███0█0█0█0█0█0███0█0█████0█0███0███0█0███████0█████0█0███0█
                █00000000000█0000000█0000000█0█0█000█0000000█0█0█0█000█0█0█000█0█0█0█000█0█000█0█0█000█0█0█0█0█0█0█0█
                ███0███0█████0█0█0█████0█0███████0███0███0█0███0███0█████0█0███0█0█0███████0█0███0███0█0█0█0███0█0█0█
                █0█0█0█0000000█0█0█00000█0█000000000█0█000█00000█0█0█0█000000000█0█0█00000█0█0█0█0█0█00000000000█000█
                █0███0█0█████0███0█0█0███0███0█████0█0█████████0█0█0█0███████████0█0█0███0█0█0█0█0█0█████0███0█████0█
                █0000000█0█0█000█0█0█0█0█0█000█00000█0█00000█00000█00000█000█0000000█0█00000█0000000█0█000█0000000█0█
                █0███████0█0█████0███0█0█0███0█████████0███0█0███0█0█0█0█0█0█0█0█0█████0█████████0███0█0███0█████0█0█
                █0█0█0000000000000█0█0█00000000000█0█000█000█0█0█000█0█0█0█000█0█000000000█000█000█0█00000█00000█0█0█
                ███0█0█████████████0███0█0█0█████0█0█0█0█████0█0███0███████0███0█0███0█████0█0█0███0█████0███0█████0█
                █000█0█00000█0000000█000█0█000█0█000█0█00000█000█0█00000000000█0█0█000█0█000█0█000█0000000█0█0█000█0█
                █0█████████0█0█████0███0███████0███0███0█████████0█0█0███0███████0█0█0█0█0█████0███████████0█0█0█0█0█
                █0█00000000000█0█000█000000000█0█000█00000█0█000█000█000█000█00000█0█000█0000000█000█000█0000000█0█0█
                █0█0█0███████0█0█0█0█0█0█████0█0█0█0█0███0█0███0█0█████████0█0█0█0█0█████0███0███0███0█0█████0███0███
                █000█0000000█0█0█0█0█0█0█0█0█0█000█000█000█000█0█0000000█000█0█0█0█0█000█0█00000000000█000█000█00000█
                ███0█0█████████0█████0███0█0█████████████0███0█0█████0█████████0███████0███████0███0█████0███████0█0█
                █0█0█00000█00000000000█000█0█000█000000000█000000000█00000█0000000█000█000█0█00000█000█0█0█000█000█0█
                █0█████0█████████0███0█0█0█0█0█0█████0███0█0█████0█0███0███0█████0███0███0█0███0███████0█0███0███0█0█
                █000█000█0█000000000█0█0█0█0█0█0█00000█0█0000000█0█000█0█00000█0█0█0█0█000000000█000█000█000█0█0█0█0█
                █0█████0█0█████████0███0███0█0███████0█0███0███0███████████0█0█0█0█0█0███0███████0█████0█0███0█0███0█
                █000█0█0000000█00000█00000█000█0█00000█0000000█0█000█00000█0█0█000█0█000█0█0█00000█00000000000█00000█
                █0███0█████0███0█████0███0███0█0█████0█████0█0█0█0███0███████0█0███0█0███0█0█0███0███0███0█0█████0███
                █00000000000█00000█0█0█0█000█0█0000000█000█0█0█000█000█000█0█0█0█0000000█0█000█0█0█0█0█0█0█0000000█0█
                █0███0███0█████████0███0███0█0█0███0█0███0█0█0█0███0███0█0█0█0███0█████████0█0█0███0█0█0█0█0█████0█0█
                █0█0█000█0█000█0000000█000█0█000█0█0█0█00000█0█0█00000█0█0█000█00000█0█000█0█0█0█000█000█0█0█00000█0█
                █0█0███0█████0█0███0█0███0█0█0███0█0███████████0█0█0███0█████0███0███0█0█0█0███0█0███0███0███0█████0█
                █000█0█0000000█0█000█000█00000█0█000█0█0000000█000█0█000000000█00000█000█000█0█0█000█000█000█0█00000█
                █0███0█0███████0█████0█0█0███0█0█████0█0███0█████0█████0█0█0█0█0█████████0███0█0█0███████████████0███
                █0█000000000█0█0█000█0█000█0█0000000000000█00000█00000█0█0█0█0000000█00000000000█000█00000█000000000█
                █0███0█████0█0█████0█0█████0███0█0█0█0███0█0███0███0█0█0███████0███0█0███0███0█0█0█████0█████████0█0█
                █0█000█000█0█00000█000█0█0█00000█0█0█0█000█0█000█000█0█000█00000█000█000█000█0█00000000000█000█000█0█
                █0█0███0█████████0█████0█0███0███████████████0███████0█0███████0███0███0███████0█0███████0███0███0███
                █0█00000000000█0█000█00000000000█00000█00000█0█00000█0█000█000█0█000█000█0█000█0█000█0000000█0000000█
                ███████0█████0█0█0███████0█████0█0███████0█████0█0█0█████0█0█████████████0███0█████0█████████0█0███0█
                █0█00000█0000000█000█0000000█0█000█0000000█0█000█0█000█0█000█00000█000█00000█0█0000000█000█0█0█0█0█0█
                █0█████0███0█████0█0███0███0█0███████0███0█0█0█0█0█0███0█0███0███0█0███0█████0█0█0███████0█0█0█0█0█0█
                █0█000█0█0█0000000█000█0█000█0█00000█000█0█000█0█0█000█000█0█0█0█0█0█0█000000000█0█000█0█00000█0█000█
                █0█0█0███0███0███████0█0█0█0█0███0███████0█0███0█0█0███0█0█0█0█0███0█0███0███████0█0███0█0█0█0█0███0█
                █000█000█0█0█000█0█000█0█0█000█000000000█00000█0█0█000█0█00000█0█0█00000█00000█0█0000000█0█0█0█0█000█
                ███0███0█0█0███0█0███0███0███0█0███████0█████████0███0█████0███0█0█0█0███0█████0█0█████0█0█████████0█
                █00000█0█000000000█000█000█000█0█000█000000000█000█000█0█000█0█0█000█000█00000█0000000█0█0█00000█000█
                █0█0███0█0█0█████0███0█0█0█0█████0█0█0█0███████0█0███0█0█0███0█0███████0███0█████████████0█0█████████
                █0█000█0█0█0█0█000█0█0█0█0█000█000█0█0█0█000█000█0█0█000█0█0█000█0█000000000█0█0000000█000█0█0000000█
                ███████0███0█0█0███0█████████0█0█████0█0█0███████0█0█0█0█0█0█0███0█0███0███0█0█0███████0█0█0███0█████
                █00000000000█0000000█000█000█000█00000█0█000█0000000█0█000█00000000000█000█000█0█00000█0█00000000000█
                █████0███████████0███0█████0█0███████0█0█0█0███████0█0█████████0███0███████0█0█0█0█0█0█0█0█0███0█0███
                █000█0█00000█0█0█0█000█000█000█0█000█0█000█0█0000000█0█0█000█000█000█0█00000█00000█0█000█0█000█0█000█
                █0█0█████0███0█0█0█0█0███0█0█0█0█0█████0█0█0█████0███0█0█0███0█0███0█0███0███0███0█████████0█0█████0█
                █0█0█0█0█0000000█000█0000000█000█000█0█0█0█0█0█0█0█00000█0█000█0█00000█000█000█0000000█000█0█0█000█0█
                ███0█0█0███0█0█0█████0█████0█0█0█0███0███0███0█0███0█0█0█0█████0███0███0███0███████0█████0█████0█████
                █0█0█000█0█0█0█000█0█00000█0█0█00000█000█0█0000000█0█0█000█000█0█00000█0█0█000█00000█000█0█000000000█
                █0█0█0█0█0█████0█0█0█0███0███████████0███0███████0█0███0███0███0███████0█0███0███0███0███0█0█0█0█████
                █0█0█0█000█000█0█000█0█0000000█0█000█0█0█000█000█000█000█00000█0█000█0█000█00000█000█0█0█000█0█000█0█
                █0█0█0███0█0███0███0█0█████████0███0█0█0█0███0███0█████0█████0███0███0█0█0█0███████0█0█0█0█0█████0█0█
                █0█00000█0█0000000█000000000█000█0█0█00000000000█0█0█0█0█0000000█0000000█0█00000█000000000█0█0█0█000█
                █0█0███0███0███0█████████0███0█0█0█0███0█0███0█████0█0█0███0█████0███████████████████████0███0█0███0█
                █000█0000000█0█000█0█000█00000█0█0█000█0█000█000█0█000█000█00000█0█00000█00000█000█0000000000000█000█
                █0█████0███0█0█████0█0███0███0███0█0█████0█0█0███0█0█0███0█0█████0█0███████0█████0█0█████████████0███
                █0█0█0█0█0█000█0█00000█000█0█0000000000000█0█0█000█0█000█000000000█0█000█0000000█000000000█00000█000█
                ███0█0███0█████0█0███████0█0███0█0███████████████0█0███0███████0███0█0█████0█0█0█████0█0█0█0███0█0███
                █00000█000█0█00000█000█0000000█0█000000000█000█000█000█0█0█00000█000█0000000█0█0000000█0█0█000█000█0█
                █0█0█0███0█0█████0█0███0███████0███0█████0█0███0███████0█0█████████0█0███0███0█0█████0███0█████0███0█
                █0█0█00000█000000000█000█00000█0█000█00000█00000█0000000█000█0█00000█000█0█0█0█000█00000█0█00000█000█
                █0█████0█0█0█0███0███0███0█████0███████████0█0█████0███0█0█0█0█████0█████0█0█0███████0███████████0███
                █0█0█0█0█000█0█0█0000000000000█000█000█000█0█00000█0█0█000█00000█000█000█000█000█0█0█0█000000000█000█
                █0█0█0█0█0█0███0█0█0█0█████0█0███████0█0█0███████0███0█████████0███0███0█0███0█0█0█0█0█0███0█0█0█0███
                █0█0█0█0█0█0█0█0█0█0█000█0█0█0█0000000█0█0█000█0█0█000█000█000000000█0000000█0█0█0000000█0█0█0█00000█
                █0█0█0███0███0█0█████0███0███████0█0█0█0█████0█0█0███0███0███0█0███0█0█████0███████0███0█0█0███0█0█0█
                █0█0█00000█000█000█000█0█00000█0█0█0█000000000█00000█0█0█000█0█0█0█00000█0█00000█000█00000█0█0█0█0█0█
                █0█0███0█████0███0█0███0█0█████0█0█████0█0███████0███0█0█0███████0███████0█0█0█████████0█0███0███0█0█
                █0█0█000█000000000█0█0000000█0█0█0█00000█0█000█00000█0█0█0█00000█000000000█0█0█0█0000000█000█0█000█0█
                █0█0███0███0█████0█0███████0█0█0█0███0███0█0█0█0█0███0█0█0█████0███████0█████0█0█0█████0█0███0███0███
                █000█000█0000000█0█00000█00000█0█000█000█000█000█000█000█0000000█000█0█0█0000000█0█0█0█0█000█0█00000█
                █████0█0███████0███0█0███0█0███0███0███0███0█0█████████0█0█0█████0███0█0███0███████0█0█0█████0███0█0█
                █000█0█000█00000█0█0█0█000█00000█000█000█000█00000█0█00000█000█0█0█000000000█000█000█0█0█000█000█0█0█
                █0█████0███0█████0█████0███0█0███████0█0███████████0███0█0███0█0█0███0█0█0███0███0███0█0█0█0█0█████0█
                █00000000000█000█00000█000█0█00000█000█000█00000000000█0█0█0█0000000█0█0█000█000█00000█0█0█00000█000█
                █0███████0█0█0███0█0█0███0█████0█0█████0███0█0███0███0█0█0█0███████0█████0█████0███0███0███0███0█████
                █00000█0█0█00000█0█0█000000000█0█0█0█000█000█0█0█0█00000█0█0000000█0█0█0█000000000█000█0█000█00000█0█
                █0█████0█0███████████████0█0█0███0█0███0█████0█0█0███0███████████0█0█0█0███0█████0███0█0█████████0█0█
                █0█000█00000█000█0█000█0█0█0█0█0█0█0000000█00000█000█000█0█00000█000█0█0█0█0█0000000█000█000█00000█0█
                █████0█0█0█0█0█0█0█0███0█0█0███0█0█0█████0███0███0█████0█0███0█████0█0█0█0█████0█0███████0█0█0█████0█
                █000█000█0█000█0█000000000█000█000█00000█0█000█0000000█0█00000000000000000█0█0█0█000█000█0█000█0█000█
                █0███0█████0█0█0█0███0█0███0█0███████0█0█0█0█████0███████0█0█0███0█0█████0█0█0███0█0███0█████0█0█0███
                █0█000█000█0█0█0█0█000█000█0█0█0000000█0█0000000█000█00000█0█000█0█0█0█000█00000█0█0█000█00000█00000█
                █0█████0███0█0█████0█0█0███████████0█████████0█0█████0█████████0█████0█0█████0█████0███0█████0███0█0█
                █0█0█0000000█0█00000█0█0█0█0█0█00000█0█00000█0█000█0█0█00000█000000000█00000000000█00000█0█000█0█0█0█
                █0█0█████0█0███0█0█0█0█0█0█0█0█████0█0█0███████0███0███0█████0█0█0█0███████0███████0█0███0███0█0█0█0█
                █00000█000█0█0█0█0█0█0█0█000█00000█000█0█000█0█000█00000█00000█0█0█0█00000█000█0█000█0█000000000█0█0█
                █████0███0███0███████0█0█0███████0█0███0█0███0███0█0███0█████0█0█████0█0█████0█0█0█0███████0█████0█0█
                █0█0█000000000█0█0█000█0█00000█0█000█00000█000█0000000█0█00000█00000█0█0█0000000█0█00000█00000█0█0█0█
                █0█0█████0█████0█0███0███████0█0█0█0███0█0█0█████0█0█████0█0█████0█████0█████0█████0█0███0█0███0█0█0█
                █0█0█000000000█000█0█0000000█000█0█0█000█000█00000█00000█0█00000█000█00000█000█0█000█000█0█0█0█0█0█0█
                █0█0███0█0█████0█0█0█0███████0███0███0███0███0█0█████0█0███0█0█████████0███████0█0█0███████0█0█0█0█0█
                █0000000█0█0█0█0█0█0000000000000█0█000█0000000█00000█0█000█0█0000000█000█0█000█000█0█00000█000█0█0█0█
                ███0█0█0█0█0█0█0█0█0█0█0█0█0█0███████0█████0█████████0█0█0███0███████0███0███0███0█████0█████0█0█0█0█
                █000█0█0█0000000█000█0█0█0█0█0█0000000█000█0000000█0█0█0█0█0█000000000█0█0█00000█0█000000000000000█0█
                █0███████0█████0█0███████0███0█0█0█0███0█0███0█0███0█0█████0█0█0███████0█0███0█0█0███████0███0███████
                █0█0000000█00000█000█0000000█000█0█000█0█00000█000█0000000█000█0000000000000█0█0000000000000█0000000█
                ███████████████████████████████████████████████████████████████████████████████████████████████████00""";
        Maze maze = new MazeFactory().parse(mazeStr);
        Cell start = maze.getCell(0, 0);
        Cell end = maze.getCell(maze.getWidth() - 1, maze.getHeight() - 1);

        bfs(maze, start, end);
        aStar(maze, start, end);
    }

    public static Pair generateHeightAndWidth() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Height: ");
        int height = scanner.nextInt();
        System.out.print("Width: ");
        int width = scanner.nextInt();
        scanner.close();

        return new Pair(height, width);
    }

    public static Cell getRandomCell(Maze maze) {
        Random random = new Random();
        Cell cell;

        do {
            cell = maze.getCell(random.nextInt(maze.getWidth()), random.nextInt(maze.getHeight()));
        } while (cell.getType() != Cell.Type.PATH);

        return cell;
    }

    public static void bfs(Maze maze, Cell start, Cell end) {
        Timer timer = new Timer();
        System.out.print("BFS started...");
        timer.start();
        Result result = BfsAlgorithm.solve(maze, start, end);
        timer.stop();
        System.out.println(" Done");
        System.out.println("Time spent: " + timer.getTime());
        printResult(maze, result, start, end);
    }

    public static void aStar(Maze maze, Cell start, Cell end) {
        Timer timer = new Timer();
        System.out.print("AStar started...");
        timer.start();
        Result result = AStarAlgorithm.solve(maze, start, end);
        timer.stop();
        System.out.println(" Done");
        System.out.println("Time spent: " + timer.getTime());
        printResult(maze, result, start, end);
    }

    private static void printResult(Maze maze, Result result, Cell start, Cell end) {
        System.out.println("Results");
        System.out.printf("Iterations: %d, States: %d, Saved states: %d\n",
                result.getIterations(), result.getStates(), result.getSavedStates());
        System.out.printf("Path - '%c', Wall - '%c'\n", Cell.Type.PATH.getChar(), Cell.Type.WALL.getChar());

        int heightDim = (int) Math.log10(maze.getHeight()) + 1;
        int widthDim = (int) Math.log10(maze.getWidth()) + 1;
        System.out.print(" ".repeat(heightDim + 2) + "|");
        for (int i = 1; i <= maze.getWidth(); i++) {
            int numDim = (int) Math.log10(i) + 1;
            System.out.print(" ".repeat(widthDim - numDim + 1) + i);
        }
        System.out.println();

        System.out.println("-".repeat(heightDim + 2) + "+" + "-".repeat((widthDim + 1) * maze.getWidth()));
        for (int y = 0; y < maze.getHeight(); y++) {
            int numDim = (int) Math.log10(y + 1) + 1;
            System.out.print(" ".repeat(heightDim - numDim + 1) + (y + 1) + " |");
            for (int x = 0; x < maze.getWidth(); x++) {
                Cell cell = maze.getCell(x, y);
                String ch = Character.toString(cell.getType().getChar());
                if (cell.equals(start) || cell.equals(end)) {
                    ch = "\u001B[31m" + ch + "\u001B[0m";
                } else if (result.hasPath()) {
                    for (Cell mazeCell : result.getPath()) {
                        if (mazeCell.hasCoordinates(x, y)) {
                            ch = "\u001B[32m" + ch + "\u001B[0m";
                            break;
                        }
                    }
                }
                System.out.print(" ".repeat(widthDim) + ch);
            }
            System.out.println();
        }
        System.out.println(result.hasPath() ? "" : "Maze cannot be solved");
    }

    private record Pair(int num1, int num2) {
    }
}
